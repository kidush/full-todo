# Name of your application. Used to uniquely configure containers.
service: full-todo

# Name of the container image.
image: kidush/full-todo

# Deploy to these servers.
servers:
  web:
    - 159.223.141.85

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# If using something like Cloudflare, it is recommended to set encryption mode 
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption. 
proxy: 
  # ssl: true
  host: todo.thiagoflins.com
  # kamal-proxy connects to your container over port 80, use `app_port` to specify a different port.
  app_port: 3000
  healthcheck:
    interval: 5
    timeout: 5

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: kidush

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

builder:
  arch: amd64
  secrets:
    - SECRET_KEY_BASE


env:
  clear:
    DB_HOST: full-todo-db
    RAILS_ENV: production
    POSTGRES_USER: postgres
  secret:
    - RAILS_MASTER_KEY_PRODUCTION
    - SECRET_KEY_BASE
    - POSTGRES_PASSWORD
    - DATABASE_URL

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:17.0
    port: "127.0.0.1:5432:5432"
    host: 159.223.141.85
    env:
      clear:
        POSTGRES_USER: 'postgres'
        POSTGRES_DB: 'full-todo'
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
